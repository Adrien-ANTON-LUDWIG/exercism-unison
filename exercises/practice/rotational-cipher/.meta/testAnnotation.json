[
  {
    "test_code": "rotationalCipher.test.ex1 = let\n\tTest.label \"rotate a by 0, same output as input\" <| Test.expect (rotate \"a\" 0 === \"a\")",
    "name": "rotationalCipher.test.ex1"
  },
  {
    "test_code": "rotationalCipher.test.ex2 = let\n\tTest.label \"rotate a by 1\" <| Test.expect (rotate \"a\" 1 === \"b\")",
    "name": "rotationalCipher.test.ex2"
  },
  {
    "test_code": "rotationalCipher.test.ex3 = let\n\tTest.label \"rotate a by 26, same output as input\" <| Test.expect (rotate \"a\" 26 === \"a\")",
    "name": "rotationalCipher.test.ex3"
  },
  {
    "test_code": "rotationalCipher.test.ex4 = let\n\tTest.label \"rotate m by 13\" <| Test.expect (rotate \"m\" 13 === \"z\")",
    "name": "rotationalCipher.test.ex4"
  },
  {
    "test_code": "rotationalCipher.test.ex5 = let\n\tTest.label \"rotate n by 13 with wrap around alphabet\" <| Test.expect (rotate \"n\" 13 === \"a\")",
    "name": "rotationalCipher.test.ex5"
  },
  {
    "test_code": "rotationalCipher.test.ex6 = let\n\tTest.label \"rotate capital letters\" <| Test.expect (rotate \"OMG\" 5 === \"TRL\")",
    "name": "rotationalCipher.test.ex6"
  },
  {
    "test_code": "rotationalCipher.test.ex7 = let\n\tTest.label \"rotate spaces\" <| Test.expect (rotate \"O M G\" 5 === \"T R L\")",
    "name": "rotationalCipher.test.ex7"
  },
  {
    "test_code": "rotationalCipher.test.ex8 = let\n\tTest.label \"rotate numbers\" <| Test.expect (rotate \"Testing 1 2 3 testing\" 4 === \"Xiwxmrk 1 2 3 xiwxmrk\")",
    "name": "rotationalCipher.test.ex8"
  },
  {
    "test_code": "rotationalCipher.test.ex9 = let\n\tTest.label \"rotate punctuation\" <| Test.expect (rotate \"Let's eat, Grandma!\" 21 === \"Gzo'n zvo, Bmviyhv!\")",
    "name": "rotationalCipher.test.ex9"
  },
  {
    "test_code": "rotationalCipher.test.ex10 = let\n\tTest.label \"rotate all letters\" <| Test.expect (rotate \"The quick brown fox jumps over the lazy dog.\" 13 === \"Gur dhvpx oebja sbk whzcf bire gur ynml qbt.\")",
    "name": "rotationalCipher.test.ex10"
  }
]